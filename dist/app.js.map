{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import compression from 'compression';\r\nimport cookieParser from 'cookie-parser';\r\nimport cors from 'cors';\r\nimport express from 'express';\r\nimport helmet from 'helmet';\r\nimport hpp from 'hpp';\r\nimport { connect, set } from 'mongoose';\r\nimport morgan from 'morgan';\r\n\r\nimport { CREDENTIALS, LOG_FORMAT, NODE_ENV, ORIGIN, PORT } from '@config';\r\nimport { dbConnection } from '@databases';\r\nimport { Routes } from '@interfaces/routes.interface';\r\nimport errorMiddleware from '@middlewares/error.middleware';\r\nimport { logger, stream } from '@utils/logger';\r\n\r\nclass App {\r\n  public app: express.Application;\r\n  public env: string;\r\n  public port: string | number;\r\n\r\n  constructor(routes: Routes[]) {\r\n    this.app = express();\r\n    this.env = NODE_ENV || 'development';\r\n    this.port = PORT || 3000;\r\n\r\n    this.connectToDatabase();\r\n    this.initializeMiddlewares();\r\n    this.initializeRoutes(routes);\r\n    this.initializeSwagger();\r\n    this.initializeErrorHandling();\r\n  }\r\n\r\n  public listen() {\r\n    this.app.listen(this.port, () => {\r\n      logger.info(`=================================`);\r\n      logger.info(`======= ENV: ${this.env} =======`);\r\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\r\n      logger.info(`=================================`);\r\n    });\r\n  }\r\n\r\n  public getServer() {\r\n    return this.app;\r\n  }\r\n\r\n  private connectToDatabase() {\r\n    if (this.env !== 'production') {\r\n      set('debug', true);\r\n    }\r\n\r\n    connect(dbConnection.url, dbConnection.options);\r\n  }\r\n\r\n  private initializeMiddlewares() {\r\n    this.app.use(morgan(LOG_FORMAT, { stream }));\r\n    this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\r\n    this.app.use(hpp());\r\n    this.app.use(helmet());\r\n    this.app.use(compression());\r\n    this.app.use(express.json());\r\n    this.app.use(express.urlencoded({ extended: true }));\r\n    this.app.use(cookieParser());\r\n  }\r\n\r\n  private initializeRoutes(routes: Routes[]) {\r\n    routes.forEach(route => {\r\n      this.app.use('/', route.router);\r\n    });\r\n  }\r\n\r\n  private initializeSwagger() {\r\n    const options = {\r\n      swaggerDefinition: {\r\n        info: {\r\n          title: 'REST API',\r\n          version: '1.0.0',\r\n          description: 'Example docs',\r\n        },\r\n      },\r\n      apis: ['swagger.yaml'],\r\n    };\r\n  }\r\n\r\n  private initializeErrorHandling() {\r\n    this.app.use(errorMiddleware);\r\n  }\r\n}\r\n\r\nexport default App;\r\n"],"names":["App","listen","app","port","logger","info","env","getServer","connectToDatabase","set","connect","dbConnection","url","options","initializeMiddlewares","use","morgan","LOG_FORMAT","stream","cors","origin","ORIGIN","credentials","CREDENTIALS","hpp","helmet","compression","express","json","urlencoded","extended","cookieParser","initializeRoutes","routes","forEach","route","router","initializeSwagger","swaggerDefinition","title","version","description","apis","initializeErrorHandling","errorMiddleware","constructor","NODE_ENV","PORT"],"mappings":"AAAA;;;;+BAwFA;;aAAA;;oDAxFwB;qDACC;6CACR;gDACG;+CACD;4CACH;0BACa;+CACV;wBAE6C;2BACnC;wDAED;wBACG;;;;;;AAE/B,IAAA,AAAMA,MAAN,MAAMA;IAiBGC,SAAS;QACd,IAAI,CAACC,GAAG,CAACD,MAAM,CAAC,IAAI,CAACE,IAAI,EAAE,IAAM;YAC/BC,cAAM,CAACC,IAAI,CAAC,CAAC,iCAAiC,CAAC;YAC/CD,cAAM,CAACC,IAAI,CAAC,CAAC,aAAa,EAAE,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAC;YAC9CF,cAAM,CAACC,IAAI,CAAC,CAAC,4BAA4B,EAAE,IAAI,CAACF,IAAI,CAAC,CAAC;YACtDC,cAAM,CAACC,IAAI,CAAC,CAAC,iCAAiC,CAAC;QACjD;IACF;IAEOE,YAAY;QACjB,OAAO,IAAI,CAACL,GAAG;IACjB;IAEQM,oBAAoB;QAC1B,IAAI,IAAI,CAACF,GAAG,KAAK,cAAc;YAC7BG,IAAAA,aAAG,EAAC,SAAS,IAAI;QACnB,CAAC;QAEDC,IAAAA,iBAAO,EAACC,uBAAY,CAACC,GAAG,EAAED,uBAAY,CAACE,OAAO;IAChD;IAEQC,wBAAwB;QAC9B,IAAI,CAACZ,GAAG,CAACa,GAAG,CAACC,IAAAA,eAAM,EAACC,kBAAU,EAAE;YAAEC,QAAAA,cAAM;QAAC;QACzC,IAAI,CAAChB,GAAG,CAACa,GAAG,CAACI,IAAAA,aAAI,EAAC;YAAEC,QAAQC,cAAM;YAAEC,aAAaC,mBAAW;QAAC;QAC7D,IAAI,CAACrB,GAAG,CAACa,GAAG,CAACS,IAAAA,YAAG;QAChB,IAAI,CAACtB,GAAG,CAACa,GAAG,CAACU,IAAAA,eAAM;QACnB,IAAI,CAACvB,GAAG,CAACa,GAAG,CAACW,IAAAA,oBAAW;QACxB,IAAI,CAACxB,GAAG,CAACa,GAAG,CAACY,gBAAO,CAACC,IAAI;QACzB,IAAI,CAAC1B,GAAG,CAACa,GAAG,CAACY,gBAAO,CAACE,UAAU,CAAC;YAAEC,UAAU,IAAI;QAAC;QACjD,IAAI,CAAC5B,GAAG,CAACa,GAAG,CAACgB,IAAAA,qBAAY;IAC3B;IAEQC,iBAAiBC,MAAgB,EAAE;QACzCA,OAAOC,OAAO,CAACC,CAAAA,QAAS;YACtB,IAAI,CAACjC,GAAG,CAACa,GAAG,CAAC,KAAKoB,MAAMC,MAAM;QAChC;IACF;IAEQC,oBAAoB;QAC1B,MAAMxB,UAAU;YACdyB,mBAAmB;gBACjBjC,MAAM;oBACJkC,OAAO;oBACPC,SAAS;oBACTC,aAAa;gBACf;YACF;YACAC,MAAM;gBAAC;aAAe;QACxB;IACF;IAEQC,0BAA0B;QAChC,IAAI,CAACzC,GAAG,CAACa,GAAG,CAAC6B,wBAAe;IAC9B;IAjEAC,YAAYZ,MAAgB,CAAE;QAC5B,IAAI,CAAC/B,GAAG,GAAGyB,IAAAA,gBAAO;QAClB,IAAI,CAACrB,GAAG,GAAGwC,gBAAQ,IAAI;QACvB,IAAI,CAAC3C,IAAI,GAAG4C,YAAI,IAAI;QAEpB,IAAI,CAACvC,iBAAiB;QACtB,IAAI,CAACM,qBAAqB;QAC1B,IAAI,CAACkB,gBAAgB,CAACC;QACtB,IAAI,CAACI,iBAAiB;QACtB,IAAI,CAACM,uBAAuB;IAC9B;AAwDF;MAEA,WAAe3C"}