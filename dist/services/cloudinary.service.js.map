{"version":3,"sources":["../../src/services/cloudinary.service.ts"],"sourcesContent":["const cloudinary = require('cloudinary').v2;\r\nimport { CLOUDINARY_API_KEY, CLOUDINARY_API_SECRET, CLOUDINARY_CLOUD_NAME } from '@/config';\r\n\r\nconst cloud = cloudinary.config({\r\n  cloud_name: CLOUDINARY_CLOUD_NAME,\r\n  api_key: CLOUDINARY_API_KEY,\r\n  api_secret: CLOUDINARY_API_SECRET,\r\n});\r\n\r\nclass CloudinaryService {\r\n  public cloudinary = cloud;\r\n\r\n  public async uploadVideo(file: any, thumbNail: any): Promise<any> {\r\n    try {\r\n      const savedVideo = await cloudinary.uploader.upload(file.path, {\r\n        resource_type: 'video',\r\n        chunk_size: 6000000,\r\n        folder: 'videos',\r\n        eager: [\r\n          {\r\n            width: 300,\r\n            height: 300,\r\n            crop: 'pad',\r\n            audio_codec: 'none',\r\n          },\r\n          {\r\n            width: 160,\r\n            height: 100,\r\n            crop: 'crop',\r\n            gravity: 'south',\r\n            audio_codec: 'none',\r\n          },\r\n        ],\r\n        eager_async: true,\r\n        use_filename: true,\r\n        unique_filename: false,\r\n      });\r\n      const savedThumb = await cloudinary.uploader.upload(thumbNail.path, {\r\n        folder: 'thumbnails',\r\n        resource_type: 'image',\r\n        use_filename: true,\r\n        unique_filename: false,\r\n      });\r\n\r\n      return { savedVideo, savedThumb };\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  public async deleteVideo(public_id: string): Promise<any> {\r\n    try {\r\n      await cloudinary.uploader.destroy(public_id);\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  // upload only image\r\n  public async uploadImage(image_file: any, folder: string): Promise<any> {\r\n    const savedThumb = await cloudinary.uploader.upload(image_file.path, {\r\n      folder: folder,\r\n      resource_type: 'image',\r\n      use_filename: true,\r\n      unique_filename: false,\r\n    });\r\n    console.log(savedThumb);\r\n    return savedThumb;\r\n  }\r\n}\r\n\r\nexport default CloudinaryService;\r\n"],"names":["cloudinary","require","v2","cloud","config","cloud_name","CLOUDINARY_CLOUD_NAME","api_key","CLOUDINARY_API_KEY","api_secret","CLOUDINARY_API_SECRET","CloudinaryService","uploadVideo","file","thumbNail","savedVideo","uploader","upload","path","resource_type","chunk_size","folder","eager","width","height","crop","audio_codec","gravity","eager_async","use_filename","unique_filename","savedThumb","error","deleteVideo","public_id","destroy","uploadImage","image_file","console","log"],"mappings":"AAAA;;;;+BAsEA;;aAAA;;wBArEiF;AADjF,MAAMA,aAAaC,QAAQ,cAAcC,EAAE;AAG3C,MAAMC,QAAQH,WAAWI,MAAM,CAAC;IAC9BC,YAAYC,6BAAqB;IACjCC,SAASC,0BAAkB;IAC3BC,YAAYC,6BAAqB;AACnC;AAEA,IAAA,AAAMC,oBAAN,MAAMA;IAGJ,MAAaC,YAAYC,IAAS,EAAEC,SAAc,EAAgB;QAChE,IAAI;YACF,MAAMC,aAAa,MAAMf,WAAWgB,QAAQ,CAACC,MAAM,CAACJ,KAAKK,IAAI,EAAE;gBAC7DC,eAAe;gBACfC,YAAY;gBACZC,QAAQ;gBACRC,OAAO;oBACL;wBACEC,OAAO;wBACPC,QAAQ;wBACRC,MAAM;wBACNC,aAAa;oBACf;oBACA;wBACEH,OAAO;wBACPC,QAAQ;wBACRC,MAAM;wBACNE,SAAS;wBACTD,aAAa;oBACf;iBACD;gBACDE,aAAa,IAAI;gBACjBC,cAAc,IAAI;gBAClBC,iBAAiB,KAAK;YACxB;YACA,MAAMC,aAAa,MAAM/B,WAAWgB,QAAQ,CAACC,MAAM,CAACH,UAAUI,IAAI,EAAE;gBAClEG,QAAQ;gBACRF,eAAe;gBACfU,cAAc,IAAI;gBAClBC,iBAAiB,KAAK;YACxB;YAEA,OAAO;gBAAEf;gBAAYgB;YAAW;QAClC,EAAE,OAAOC,OAAO;YACd,OAAOA;QACT;IACF;IACA,MAAaC,YAAYC,SAAiB,EAAgB;QACxD,IAAI;YACF,MAAMlC,WAAWgB,QAAQ,CAACmB,OAAO,CAACD;QACpC,EAAE,OAAOF,OAAO;YACd,OAAOA;QACT;IACF;IAGA,MAAaI,YAAYC,UAAe,EAAEhB,MAAc,EAAgB;QACtE,MAAMU,aAAa,MAAM/B,WAAWgB,QAAQ,CAACC,MAAM,CAACoB,WAAWnB,IAAI,EAAE;YACnEG,QAAQA;YACRF,eAAe;YACfU,cAAc,IAAI;YAClBC,iBAAiB,KAAK;QACxB;QACAQ,QAAQC,GAAG,CAACR;QACZ,OAAOA;IACT;;aAzDO/B,aAAaG;;AA0DtB;MAEA,WAAeQ"}